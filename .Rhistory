arousal = NA,
pleasure_centered = NA,
arousal_centered = NA,
description = "PANAS")
AG_pp <- read_csv(paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/AG_pp0", pp, ".csv")) %>%
transmute(pp, day, interval = NA,
real_start = with_tz(real_start, tz = "Europe/Amsterdam"),
PosA = NA, NegA = NA,
PA_centered = NA, NA_centered = NA,
pleasure, arousal,
pleasure_centered,
arousal_centered,
description = "AG")
AG_PANAS <- AG_pp %>%
rbind(PANAS_pp) %>%
arrange(real_start) %>%
# identify most recent AGs before PANAS
mutate(most_recent_AG = ifelse(!is.na(lead(interval)) & description == "AG", 1, NA)) %>%
mutate(interval = ifelse(lag(description) == "PANAS" & day == lag(day),
0, interval)) %>%
mutate(interval = ifelse(lag(interval) == 0 & day == lag(day) & !is.na(lag(interval)),
0, interval)) %>%
#just in case there are 3 AG after PANAS in a day, but this shouldn't happen:
mutate(interval = ifelse(lag(interval) == 0 & day == lag(day) & !is.na(lag(interval)),
0, interval)) %>%
fill(interval, .direction = "up") %>%
#filter out AGs answered immediately after PANAS
filter(interval != 0) %>%
mutate(day_next_PANAS = ifelse(description == "PANAS", day, NA)) %>%
fill(day_next_PANAS, .direction = "up") %>%
#only keep AG data to build features
filter(description == "AG")
# most recent AG (centered)
AG_recent <- AG_PANAS %>%
filter(most_recent_AG == 1) %>%
transmute(interval,
real_start_most_recent = real_start,
pleasure_most_recent = pleasure,
arousal_most_recent = arousal,
pleasure_most_recent_centered = pleasure_centered,
arousal_most_recent_centered = arousal_centered)
#mean AG on day of PANAS (before PANAS)
AG_today <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day) %>%
group_by(interval) %>%
summarise(mean_pleasure_today = mean(pleasure),
mean_arousal_today = mean(arousal),
mean_pleasure_centered_today = mean(pleasure_centered),
mean_arousal_centered_today = mean(arousal_centered))
AG_2_days <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day | day_of_PANAS == day +1) %>%
group_by(interval) %>%
summarise(mean_pleasure_2_days = mean(pleasure),
mean_arousal_2_days = mean(arousal),
mean_pleasure_centered_2_days = mean(pleasure_centered),
mean_arousal_centered_2_days = mean(arousal_centered))
AG_3_days <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day | day_of_PANAS == day +1 | day_of_PANAS == day + 2) %>%
group_by(interval) %>%
summarise(mean_pleasure_3_days = mean(pleasure),
mean_arousal_3_days = mean(arousal),
mean_pleasure_centered_3_days = mean(pleasure_centered),
mean_arousal_centered_3_days = mean(arousal_centered))
rows_per_interval <- count(AG_PANAS, interval) %>%
transmute(interval, rows_per_interval = n)
AG_time <- AG_PANAS %>%
left_join(rows_per_interval, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered = cor(arousal_centered, 1: mean(rows_per_interval)))
AG_time_today <-  AG_PANAS %>%
left_join(rows_per_interval, by = "interval") %>%
filter(day_next_PANAS == day) %>%
group_by(interval) %>%
summarise(time_cor_pleasure_today = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_today = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_today = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_today = cor(arousal_centered, 1: mean(rows_per_interval)))
AG_time_2_days <-  AG_PANAS %>%
left_join(rows_per_interval, by = "interval") %>%
filter(day_next_PANAS == day | day_next_PANAS == day + 1 ) %>%
group_by(interval) %>%
summarise(time_cor_pleasure_2_days = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_2_days = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_2_days = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_2_days= cor(arousal_centered, 1: mean(rows_per_interval)))
PANAS_features <- PANAS_pp %>%
select(1:8) %>%
cbind(PANAS_0_pp) %>%
left_join(AG_recent, by = "interval") %>%
left_join(AG_today, by = "interval") %>%
left_join(AG_2_days, by = "interval") %>%
left_join(AG_3_days, by = "interval") %>%
left_join(AG_time_today, by = "interval") %>%
left_join(AG_time_2_days, by = "interval") %>%
left_join(AG_time, by = "interval")
write_csv(PANAS_features, paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_AG_pp0", pp, ".csv"))
}
ppumms <- c(2:7, 21:45, 47:55, 57:87)
for (ppumm in ppumms) {
pp <- as.character(ppumm)
if (str_length(pp) < 2) {
pp <- paste0("0", pp)
}
print(pp)
AG_features(pp)
}
AG_time_today <-  AG_PANAS %>%
left_join(rows_per_interval, by = "interval") %>%
filter(day_next_PANAS == day) %>%
group_by(interval) %>%
summarise(time_cor_pleasure_today = cor(pleasure, 1:count(rows_per_interval)),
time_cor_arousal_today = cor(arousal, 1: count(rows_per_interval)),
time_cor_pleasure_centered_today = cor(pleasure_centered, 1:count(rows_per_interval)),
time_cor_arousal_centered_today = cor(arousal_centered, 1: count(rows_per_interval)))
0.99^365
1.01^365
rows_per_interval <- count(AG_PANAS %>% filter(day == day_next_PANAS), interval) %>%
transmute(interval, rows_per_interval = n)
AG_features <- function(pp) {
# initial PANAS for participant
PANAS_0_pp <- intake  %>%
filter(ppumm == pp) %>%
transmute(PA_0 = PosA,
NA_0 = NegA,
extraversion, agreeableness, conscientiousness, neuroticism,openness,
age, female, walk_per_day_mins, bike_per_day_mins, sport_frequency,
BMI, in_good_health, in_bad_health)
PANAS_pp <- read_csv(paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_pp0", pp, ".csv")) %>%
arrange(real_start) %>%
rowid_to_column() %>%
transmute(pp, day, interval = rowid,
real_start = with_tz(real_start, tz = "Europe/Amsterdam"),
PosA, NegA, PA_centered, NA_centered,
pleasure = NA,
arousal = NA,
pleasure_centered = NA,
arousal_centered = NA,
description = "PANAS")
AG_pp <- read_csv(paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/AG_pp0", pp, ".csv")) %>%
transmute(pp, day, interval = NA,
real_start = with_tz(real_start, tz = "Europe/Amsterdam"),
PosA = NA, NegA = NA,
PA_centered = NA, NA_centered = NA,
pleasure, arousal,
pleasure_centered,
arousal_centered,
description = "AG")
AG_PANAS <- AG_pp %>%
rbind(PANAS_pp) %>%
arrange(real_start) %>%
# identify most recent AGs before PANAS
mutate(most_recent_AG = ifelse(!is.na(lead(interval)) & description == "AG", 1, NA)) %>%
mutate(interval = ifelse(lag(description) == "PANAS" & day == lag(day),
0, interval)) %>%
mutate(interval = ifelse(lag(interval) == 0 & day == lag(day) & !is.na(lag(interval)),
0, interval)) %>%
#just in case there are 3 AG after PANAS in a day, but this shouldn't happen:
mutate(interval = ifelse(lag(interval) == 0 & day == lag(day) & !is.na(lag(interval)),
0, interval)) %>%
fill(interval, .direction = "up") %>%
#filter out AGs answered immediately after PANAS
filter(interval != 0) %>%
mutate(day_next_PANAS = ifelse(description == "PANAS", day, NA)) %>%
fill(day_next_PANAS, .direction = "up") %>%
#only keep AG data to build features
filter(description == "AG")
# most recent AG (centered)
AG_recent <- AG_PANAS %>%
filter(most_recent_AG == 1) %>%
transmute(interval,
real_start_most_recent = real_start,
pleasure_most_recent = pleasure,
arousal_most_recent = arousal,
pleasure_most_recent_centered = pleasure_centered,
arousal_most_recent_centered = arousal_centered)
#mean AG on day of PANAS (before PANAS)
AG_today <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day) %>%
group_by(interval) %>%
summarise(mean_pleasure_today = mean(pleasure),
mean_arousal_today = mean(arousal),
mean_pleasure_centered_today = mean(pleasure_centered),
mean_arousal_centered_today = mean(arousal_centered))
AG_2_days <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day | day_of_PANAS == day +1) %>%
group_by(interval) %>%
summarise(mean_pleasure_2_days = mean(pleasure),
mean_arousal_2_days = mean(arousal),
mean_pleasure_centered_2_days = mean(pleasure_centered),
mean_arousal_centered_2_days = mean(arousal_centered))
AG_3_days <- AG_PANAS %>%
group_by(interval) %>%
mutate(day_of_PANAS = max(day)) %>%
ungroup() %>%
filter(day_of_PANAS == day | day_of_PANAS == day +1 | day_of_PANAS == day + 2) %>%
group_by(interval) %>%
summarise(mean_pleasure_3_days = mean(pleasure),
mean_arousal_3_days = mean(arousal),
mean_pleasure_centered_3_days = mean(pleasure_centered),
mean_arousal_centered_3_days = mean(arousal_centered))
rows_per_interval <- count(AG_PANAS, interval) %>%
transmute(interval, rows_per_interval = n)
AG_time <- AG_PANAS %>%
left_join(rows_per_interval, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered = cor(arousal_centered, 1: mean(rows_per_interval)))
rows_per_interval_today <- count(AG_PANAS %>% filter(day == day_next_PANAS), interval) %>%
transmute(interval, rows_per_interval = n)
AG_time_today <-  AG_PANAS %>%
filter(day_next_PANAS == day) %>%
left_join(rows_per_interval_today, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure_today = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_today = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_today = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_today = cor(arousal_centered, 1: mean(rows_per_interval)))
rows_per_interval_2_days <- count(AG_PANAS %>% filter(day_next_PANAS == day | day_next_PANAS == day + 1), interval) %>%
transmute(interval, rows_per_interval = n)
AG_time_2_days <-  AG_PANAS %>%
filter(day_next_PANAS == day | day_next_PANAS == day + 1 ) %>%
left_join(rows_per_interval_2_days, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure_2_days = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_2_days = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_2_days = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_2_days= cor(arousal_centered, 1: mean(rows_per_interval)))
PANAS_features <- PANAS_pp %>%
select(1:8) %>%
cbind(PANAS_0_pp) %>%
left_join(AG_recent, by = "interval") %>%
left_join(AG_today, by = "interval") %>%
left_join(AG_2_days, by = "interval") %>%
left_join(AG_3_days, by = "interval") %>%
left_join(AG_time_today, by = "interval") %>%
left_join(AG_time_2_days, by = "interval") %>%
left_join(AG_time, by = "interval")
write_csv(PANAS_features, paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_AG_pp0", pp, ".csv"))
}
ppumms <- c(2:7, 21:45, 47:55, 57:87)
for (ppumm in ppumms) {
pp <- as.character(ppumm)
if (str_length(pp) < 2) {
pp <- paste0("0", pp)
}
print(pp)
AG_features(pp)
}
PANAS_header <- read_csv("~/Dropbox/data science/EQphones/results/pp002/PANAS_AG_pp002.csv") %>%
filter(ppumm == "bubu")
for (ppumm in ppumms) {
pp <- as.character(ppumm)
if (str_length(pp) < 2) {
pp <- paste0("0", pp)
}
PANAS_AG_pp <- read_csv(paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_AG_pp0", pp, ".csv"))
PANAS_header <- PANAS_header %>%
rbind(PANAS_AG_pp )
}
write_csv(PANAS_header, "~/Dropbox/data science/EQphones/results/PANAS_AG_features.csv")
PANAS_AG <- read_csv("~/Dropbox/data science/EQphones/results/PANAS_AG_features.csv")
View(PANAS_AG)
fit_PA_pleasure <- lm(PosA ~ pleasure_most_recent  +
mean_pleasure_today +
mean_pleasure_2_days +
mean_pleasure_3_days +
time_cor_pleasure_today +
time_cor_pleasure_2_days +
time_cor_pleasure ,
data = PANAS_AG)
fit_PA_pleasure_time <- lm(PosA ~ pleasure_most_recent  +
mean_pleasure_today +
mean_pleasure_2_days +
mean_pleasure_3_days +
time_cor_pleasure_today +
time_cor_pleasure_2_days +
time_cor_pleasure ,
data = PANAS_AG)
summary(fit_PA_pleasure_time)
fit <- lm(time_cor_pleasure ~ PosA * NegA ,
data = PANAS_AG)
summary(fit)
# load libraries:
library(lattice)
# load data:
data <- mtcars #dataset to play with
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green")
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = False)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = TRUE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
ggplot(data, aes(x = hp, y = mpg), col = "purple") +
geom_point() +
facet_grid(cols = vars(cyl))
# load libraries:
library(ggplot2)
# load data:
data <- mtcars #dataset to play with
ggplot(data, aes(x = hp, y = mpg), col = "purple") +
geom_point() +
facet_grid(cols = vars(cyl))
ggplot(data, aes(x = hp, y = mpg)) +
geom_point(colour = "purple") +
facet_grid(cols = vars(cyl))+
theme_bw()
library(randomForest)
data <- read_csv("~/Dropbox/data science/EQphones/results/data_centered.csv")
library(tidyverse)
library(stringr)
data <- read_csv("~/Dropbox/data science/EQphones/results/data_centered.csv")
?randomForest
sqrt(320)
rf <- randomForest(pleasure ~ ., data = data %>%
select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 18, importance = TRUE)
rf <- randomForest(pleasure ~ ., data = data %>%
select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 18, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 37, importance = TRUE, na.action=na.omit)
rf
rf$importance
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 16, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64)#, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf
data < data %>%
mutate(train(sample(TRUE, FALSE)))
data < data %>%
mutate(train = sample(TRUE, FALSE))
?sample
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, subset = train, importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
#subset = train,
importance = TRUE, na.action=na.omit)
rf
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500
subset = train,
importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 5000,
subset = train,
importance = TRUE, na.action=na.omit)
rf
yhat.rf = predict(rf ,newdata=data[-train ,])
arousal.test=data[-train ,"arousal"]
yhat.rf = predict(rf ,newdata=data[-train ,])
plot(yhat.rf, arousal.test)
plot(na.omit(yhat.rf, arousal.test))
abline(0,1)
plot(na.omit(yhat.rf, arousal.test))
abline(0,1)
mean((yhat.rf-arousal.test)^2)
mean(na.omit((yhat.rf-arousal.test))^2)
summary(yhat.rf)
summary(arousal.test)
testing <- arousal.test %>%
colbind(yhat.rf)
testing <- arousal.test %>%
cbind(yhat.rf)
mean(na.omit((testing$yhat.rf-testing$arousal.test))^2)
View(testing)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = (testing$yhat.rf-testing$arousal.test)^2)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = (yhat.rf-arousal.test)^2)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = yhat.rf-arousal.test)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = yhat.rf-arousal)
mean(na.omit((testing$yhat.rf-testing$arousal))^2)
library(astsa)
flow <- ts(scan("~/Dropbox/data science/EQphones/literature Alx/ml_methods/coloradoflow.dat.txt"))
plot(flow, type="b")
diff12 = diff(flow,12)
acf2(diff12, 48)
# ARIMA(1,0,0)×(0,1,1)12:
sarima(flow, 1,0,0,0,1,1,12)
# forecast for the next 24 months:
sarima.for(flow, 24, 1,0,0,0,1,1,12)
themodel = arima(flow, order = c(1,0,0), seasonal = list(order = c(0,1,1), period = 12))
themodel
predict(themodel, n.ahead=24)
# set working directory to directory of file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi") # we'll change this
shiny::runApp()
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi") # we'll change this
runApp()
# set working directory to directory of file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi") # we'll change this
