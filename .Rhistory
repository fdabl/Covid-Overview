AG_time_today <-  AG_PANAS %>%
filter(day_next_PANAS == day) %>%
left_join(rows_per_interval_today, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure_today = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_today = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_today = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_today = cor(arousal_centered, 1: mean(rows_per_interval)))
rows_per_interval_2_days <- count(AG_PANAS %>% filter(day_next_PANAS == day | day_next_PANAS == day + 1), interval) %>%
transmute(interval, rows_per_interval = n)
AG_time_2_days <-  AG_PANAS %>%
filter(day_next_PANAS == day | day_next_PANAS == day + 1 ) %>%
left_join(rows_per_interval_2_days, by = "interval") %>%
group_by(interval) %>%
summarise(time_cor_pleasure_2_days = cor(pleasure, 1:mean(rows_per_interval)),
time_cor_arousal_2_days = cor(arousal, 1: mean(rows_per_interval)),
time_cor_pleasure_centered_2_days = cor(pleasure_centered, 1:mean(rows_per_interval)),
time_cor_arousal_centered_2_days= cor(arousal_centered, 1: mean(rows_per_interval)))
PANAS_features <- PANAS_pp %>%
select(1:8) %>%
cbind(PANAS_0_pp) %>%
left_join(AG_recent, by = "interval") %>%
left_join(AG_today, by = "interval") %>%
left_join(AG_2_days, by = "interval") %>%
left_join(AG_3_days, by = "interval") %>%
left_join(AG_time_today, by = "interval") %>%
left_join(AG_time_2_days, by = "interval") %>%
left_join(AG_time, by = "interval")
write_csv(PANAS_features, paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_AG_pp0", pp, ".csv"))
}
ppumms <- c(2:7, 21:45, 47:55, 57:87)
for (ppumm in ppumms) {
pp <- as.character(ppumm)
if (str_length(pp) < 2) {
pp <- paste0("0", pp)
}
print(pp)
AG_features(pp)
}
PANAS_header <- read_csv("~/Dropbox/data science/EQphones/results/pp002/PANAS_AG_pp002.csv") %>%
filter(ppumm == "bubu")
for (ppumm in ppumms) {
pp <- as.character(ppumm)
if (str_length(pp) < 2) {
pp <- paste0("0", pp)
}
PANAS_AG_pp <- read_csv(paste0("~/Dropbox/data science/EQphones/results/pp0", pp, "/PANAS_AG_pp0", pp, ".csv"))
PANAS_header <- PANAS_header %>%
rbind(PANAS_AG_pp )
}
write_csv(PANAS_header, "~/Dropbox/data science/EQphones/results/PANAS_AG_features.csv")
PANAS_AG <- read_csv("~/Dropbox/data science/EQphones/results/PANAS_AG_features.csv")
View(PANAS_AG)
fit_PA_pleasure <- lm(PosA ~ pleasure_most_recent  +
mean_pleasure_today +
mean_pleasure_2_days +
mean_pleasure_3_days +
time_cor_pleasure_today +
time_cor_pleasure_2_days +
time_cor_pleasure ,
data = PANAS_AG)
fit_PA_pleasure_time <- lm(PosA ~ pleasure_most_recent  +
mean_pleasure_today +
mean_pleasure_2_days +
mean_pleasure_3_days +
time_cor_pleasure_today +
time_cor_pleasure_2_days +
time_cor_pleasure ,
data = PANAS_AG)
summary(fit_PA_pleasure_time)
fit <- lm(time_cor_pleasure ~ PosA * NegA ,
data = PANAS_AG)
summary(fit)
# load libraries:
library(lattice)
# load data:
data <- mtcars #dataset to play with
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green")
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = False)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = TRUE)
xyplot(mpg ~ hp | factor(paste('cyl:',cyl)),
data = mtcars,
col = "green",
grid = FALSE)
ggplot(data, aes(x = hp, y = mpg), col = "purple") +
geom_point() +
facet_grid(cols = vars(cyl))
# load libraries:
library(ggplot2)
# load data:
data <- mtcars #dataset to play with
ggplot(data, aes(x = hp, y = mpg), col = "purple") +
geom_point() +
facet_grid(cols = vars(cyl))
ggplot(data, aes(x = hp, y = mpg)) +
geom_point(colour = "purple") +
facet_grid(cols = vars(cyl))+
theme_bw()
library(randomForest)
data <- read_csv("~/Dropbox/data science/EQphones/results/data_centered.csv")
library(tidyverse)
library(stringr)
data <- read_csv("~/Dropbox/data science/EQphones/results/data_centered.csv")
?randomForest
sqrt(320)
rf <- randomForest(pleasure ~ ., data = data %>%
select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 18, importance = TRUE)
rf <- randomForest(pleasure ~ ., data = data %>%
select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 18, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 37, importance = TRUE, na.action=na.omit)
rf
rf$importance
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 16, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64)#, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, importance = TRUE, na.action=na.omit)
rf
data < data %>%
mutate(train(sample(TRUE, FALSE)))
data < data %>%
mutate(train = sample(TRUE, FALSE))
?sample
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6, subset = train, importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
#subset = train,
importance = TRUE, na.action=na.omit)
rf
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
subset = train,
importance = TRUE, na.action=na.omit)
rf
train = sample(1:nrow(data), nrow(data)/2)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500
subset = train,
importance = TRUE, na.action=na.omit)
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 500,
subset = train,
importance = TRUE, na.action=na.omit)
rf
rf <- randomForest(pleasure ~ ., data = data %>%
select(pleasure, 12:48, 52:54, 56:58, 61:64), #, 66:331),
#select(-c(id, ppumm, duration_sec, ResponseId, day_of_year, hour, questionnaire, arousal, real_start, real_end)),
mtry = 6,
ntree = 5000,
subset = train,
importance = TRUE, na.action=na.omit)
rf
yhat.rf = predict(rf ,newdata=data[-train ,])
arousal.test=data[-train ,"arousal"]
yhat.rf = predict(rf ,newdata=data[-train ,])
plot(yhat.rf, arousal.test)
plot(na.omit(yhat.rf, arousal.test))
abline(0,1)
plot(na.omit(yhat.rf, arousal.test))
abline(0,1)
mean((yhat.rf-arousal.test)^2)
mean(na.omit((yhat.rf-arousal.test))^2)
summary(yhat.rf)
summary(arousal.test)
testing <- arousal.test %>%
colbind(yhat.rf)
testing <- arousal.test %>%
cbind(yhat.rf)
mean(na.omit((testing$yhat.rf-testing$arousal.test))^2)
View(testing)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = (testing$yhat.rf-testing$arousal.test)^2)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = (yhat.rf-arousal.test)^2)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = yhat.rf-arousal.test)
testing <- arousal.test %>%
cbind(yhat.rf) %>%
mutate(diff = yhat.rf-arousal)
mean(na.omit((testing$yhat.rf-testing$arousal))^2)
library(astsa)
flow <- ts(scan("~/Dropbox/data science/EQphones/literature Alx/ml_methods/coloradoflow.dat.txt"))
plot(flow, type="b")
diff12 = diff(flow,12)
acf2(diff12, 48)
# ARIMA(1,0,0)Ã—(0,1,1)12:
sarima(flow, 1,0,0,0,1,1,12)
# forecast for the next 24 months:
sarima.for(flow, 24, 1,0,0,0,1,1,12)
themodel = arima(flow, order = c(1,0,0), seasonal = list(order = c(0,1,1), period = 12))
themodel
predict(themodel, n.ahead=24)
shiny::runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
runApp('Dropbox/data science/dvc-lifting/Lockdown-Overview')
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi")
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi")
data <- read_csv("data_04_24.csv")
data <- read_csv("data_04_24.csv")
View(data)
library(tidyverse)
data <- read_csv("data_04_24.csv")
summary(data$X27)
data <- read_csv("data_04_24.csv") %>%
select(1:26)
data_for_use <- data %>%
mutate(date_processed = date(Date))
data_for_use <- data %>%
mutate(date_processed = date(as.character(Date)))
data_for_use <- data %>%
mutate(date_processed = date(as.character(Date), YYYYMMDD))
data_for_use <- data %>%
mutate(date_processed = date(as.character(Date), ymd))
data_for_use <- data %>%
mutate(date_processed = as_date(Date))
View(data_for_use)
data_for_use <- data %>%
mutate(date_processed = as_date(Date, ymd))
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd))
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName))
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(asc(Date)) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths)
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths)
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
replace_na(ConfirmedCases, 0) %>%
replace_na(ConfirmedDeaths, 0)
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
mutate(ConfirmedCases=replace_na(ConfirmedCases, 0)) %>%
replace_na(ConfirmedDeaths, 0)
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
mutate(ConfirmedCases=replace_na(ConfirmedCases, 0)) %>%
mutate(ConfirmedDeaths=replace_na(ConfirmedDeaths, 0))
country_codes <- unique(data_for_use$CountryCode)
country_codes
country_codes
selected_countries <- list("AUS", "AUT", "BGR","CAN", "CHN", "CZE", "DNK", "SLV",
"EST", "FIN", "FRA", "DEU", "GRC", "HKG", "HUN", "ISL",
"IND", "IRN", "IRL", "ISR", "ITA", "JPN", "LUX", "NLD",
"NZL", "NOR", "POL", "PRT", "ROU", "RUS", "SRB", "ZAF",
"KOR", "ESP", "SWE", "CHE", "TUR", "GBR", "USA")
data_for_use <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
mutate(ConfirmedCases=replace_na(ConfirmedCases, 0)) %>%
mutate(ConfirmedDeaths=replace_na(ConfirmedDeaths, 0)) %>%
filter(CountryCode %in% selected_countries)
data_for_graph <- data %>%
# select only data from some countries
filter(CountryCode %in% selected_countries)%>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
mutate(ConfirmedCases=replace_na(ConfirmedCases, 0)) %>%
mutate(ConfirmedDeaths=replace_na(ConfirmedDeaths, 0))
graph <- ggplot(data = data_for_graph,
aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line()+
facet_wrap(CountryName)
graph <- ggplot(data = data_for_graph,
aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line()+
facet_wrap(vars(CountryName))
graph
graph <- ggplot(data = data_for_graph,
aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line()+
facet_wrap(vars(CountryName), ncol = 5)
graph
graph <- ggplot(data = data_for_graph,
aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line()+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country")
graph
graph <- ggplot(data = data_for_graph,
aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line()+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
graph
write_csv(data_for_graph, "data_processed.csv")
data_for_graph <- read_csv("data_processed.csv")
library(plotly)
data_for_graph <- data %>%
mutate(date_processed = as_date(as.character(Date), ymd)) %>%
mutate(country = as.factor(CountryName)) %>%
group_by(country) %>%
arrange(Date) %>%
# conservative decision: we fill in missings with the last recorded value
fill(ConfirmedCases) %>%
fill(ConfirmedDeaths) %>%
# before the first record, we consider that the value is 0
mutate(ConfirmedCases=replace_na(ConfirmedCases, 0)) %>%
mutate(ConfirmedDeaths=replace_na(ConfirmedDeaths, 0))
write_csv(data_for_graph, "data_processed.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
graph
# make the graph
graph <- ggplot(data = data_for_graph,
aes(text = paste("date:", date_processed, "<br>",
"SI:", StringencyIndexForDisplay)))+
geom_line(aes(x = date_processed, y = StringencyIndexForDisplay))+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
graph
# make the graph
graph <- ggplot(data = data_for_graph,
aes(text = paste("date:", data_for_graph$date_processed, "<br>",
"SI:", data_for_graph$StringencyIndexForDisplay)))+
geom_line(aes(x = date_processed, y = StringencyIndexForDisplay))+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
graph
# make the graph
graph <- ggplot(data = data_for_graph,
aes(text = paste("date:", date_processed, "<br>",
"SI:", StringencyIndexForDisplay)))+
geom_line(aes(x = date_processed, y = StringencyIndexForDisplay))+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
graph
# apply a plotly layer
graph_ly <- graph %>%
ggplotly(height = 950, width=700,
tooltip = "text"
)
graph_ly
# make the graph
graph <- ggplot(data = data_for_graph,
aes(label = date_processed, label2 = StringencyIndexForDisplay))+
geom_line(aes(x = date_processed, y = StringencyIndexForDisplay))+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
# apply a plotly layer
graph_ly <- graph %>%
ggplotly(height = 950, width=700)
graph_ly
runApp()
runApp()
runApp()
# make the graph
graph <- ggplot(data = data_for_graph, aes(x = date_processed, y = StringencyIndexForDisplay))+
geom_line(aes("x","y",text = paste0(date_processed, " SI: ", StringencyIndexForDisplay)))+
facet_wrap(vars(CountryName), ncol = 5) +
ggtitle("Stringency of measures in each selected country") +
xlab("Date") +
ylab("Stringency Index")
runApp()
runApp()
rsconnect::deployApp(
appName = "dvc_lift",
account = "ialmi") # we'll change this
